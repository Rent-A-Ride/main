Table created for Customer Notification

Vehicle Reviews

CREATE TABLE veh_Reviews (
  id INT NOT NULL AUTO_INCREMENT,
  veh_Id INT NOT NULL,
  cus_Id INT NOT NULL,
  rating DECIMAL(3,2) NOT NULL,
  comments VARCHAR(255),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (veh_Id) REFERENCES vehicle(veh_Id),
  FOREIGN KEY (cus_Id) REFERENCES customer(cus_Id)
);

vehOwner_complaints

veh_complaints table created for Vehicle Owner Complaints

CREATE TABLE vehOwner_complaints (
  id INT NOT NULL AUTO_INCREMENT,
  veh_Id INT NOT NULL,
  cus_ID INT NOT NULL,
  complaint VARCHAR(255),
  status VARCHAR(50) DEFAULT 'Pending',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (veh_Id) REFERENCES vehicle(veh_Id),
  FOREIGN KEY (cus_ID) REFERENCES customer(cus_ID)
);

vehiclecomplaint table

add status VARCHAR(50) DEFAULT 'Pending' to the table
change com_ID to VARCHAR(255)


system Complaints table

CREATE TABLE system_complaints (
  id VARCHAR(255) NOT NULL,
  cus_ID INT NOT NULL,
  complaint VARCHAR(255),
  status VARCHAR(50) DEFAULT 'Pending',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (cus_ID) REFERENCES customer(cus_ID)
);


create a table for notification mysql

CREATE TABLE notification (
  id INT NOT NULL AUTO_INCREMENT,
  user_Id INT NOT NULL,
  message VARCHAR(255),
  status VARCHAR(50) DEFAULT 'Unread',
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  FOREIGN KEY (cus_ID) REFERENCES customer(cus_ID)
);


Full texts
notification_Id
user_id
title
message
link
status
created_at

CREATE TABLE vo_notifications ( notification_id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, title VARCHAR(255) NOT NULL, message TEXT NOT NULL, link VARCHAR(255), status VARCHAR(20) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP );


const form = document.getElementById('date-search');

form.addEventListener('submit', function (event) {
    event.preventDefault();

    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;

    const searchData = {
        'start-date': startDate,
        'end-date': endDate
    };

    fetch('/your-endpoint-url', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(searchData)
    })
        .then(response => response.json())
        .then(data => {
            // Process the fetched data and update the UI
            console.log(data);
        })
        .catch(error => {
            console.error('Error:', error);
        });
});

